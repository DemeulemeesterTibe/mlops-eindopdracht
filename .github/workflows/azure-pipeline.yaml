name: MLOPS Azure text sentiment classification pipeline 

on: 
  workflow_dispatch:
    inputs:
      download_model:
        description: 'Download model'
        required: true
        type: boolean
        default: true
      # epochs:
      #   description: 'Number of epochs to train the model'
      #   required: true
      #   type: number
      #   default: 10

env:
  GROUP: mlops-eindopdracht
  WORKSPACE: eindopdracht
  LOCATION: westeurope

jobs:
  azure-pipeline:
    runs-on: ubuntu-latest
    outputs:
      ai-model: ${{ steps.azure-pipeline.outputs.latest_version }}
    steps:
      - name: 'Checkout out repository'
        uses: actions/checkout@v4

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 'Read yaml files and set output variables'
        # id: read_compute_name
        id: read_yaml
        run: | 
          echo "COMPUTE_NAME=$(yq ".name" ./environment/compute.yaml)" >> "$GITHUB_OUTPUT"
          echo "PRE_PRO_ENV=$(yq ".name" ./environment/preproEnv.yaml)" >> "$GITHUB_OUTPUT"
          echo "PRE_PRO_ENV_VERSION=$(yq ".version" ./environment/preproEnv.yaml)" >> "$GITHUB_OUTPUT"
          echo "TRAINING_ENV=$(yq ".name" ./environment/trainingEnv.yaml)" >> "$GITHUB_OUTPUT"
          echo "TRAINING_ENV_VERSION=$(yq ".version" ./environment/trainingEnv.yaml)" >> "$GITHUB_OUTPUT"
          echo "TRAIN_TEST_ENV=$(yq ".name" ./environment/traintestEnv.yaml)" >> "$GITHUB_OUTPUT"
          echo "TRAIN_TEST_ENVVERSION=$(yq ".version" ./environment/traintestEnv.yaml)" >> "$GITHUB_OUTPUT"

      - name: 'Test output variables'
        run: |
          echo "${{ steps.read_yaml.outputs.COMPUTE_NAME }}"
          echo "${{ steps.read_yaml.outputs.PRE_PRO_ENV }}:${{ steps.read_yaml.outputs.PRE_PRO_ENV_VERSION }}"
          echo "${{ steps.read_yaml.outputs.TRAINING_ENV }}:${{ steps.read_yaml.outputs.TRAINING_ENV_VERSION }}"
          echo "${{ steps.read_yaml.outputs.TRAIN_TEST_ENV }}:${{ steps.read_yaml.outputs.TRAIN_TEST_ENVVERSION }}"

      - name: Create or start compute instance
        uses: azure/CLI@v1
        id: azure-create-compute
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            if [[ $(az ml compute list -o tsv | grep ${{ steps.read_yaml.outputs.COMPUTE_NAME }}) ]]; then
              echo "Compute instance already exists and will be started"
              az ml compute start -n ${{ steps.read_yaml.outputs.COMPUTE_NAME }}
            else
              echo "Compute instance does not exist and will be created"
              az ml compute create -f ./environment/compute.yaml
            fi
      
      - name: Check and create environments
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            echo "Checking for existing environments..."
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
    
            # Check if PRE_PRO_ENV exists
            if ! [[ $(az ml environment list -o tsv | grep ${{ steps.read_yaml.outputs.PRE_PRO_ENV }}) ]]; then
                # PRE_PRO_ENV does not exist, creating it
                echo "${{ steps.read_yaml.outputs.PRE_PRO_ENV }} does not exist, creating it..."
    
                az ml environment create -f ./environment/preproEnv.yaml
    
                echo "PRE_PRO_ENV created successfully."
            else
                # PRE_PRO_ENV exists, check version
                echo "PRE_PRO_ENV exists, checking version..."
    
                if [[ $(az ml environment list -n ${{ steps.read_yaml.outputs.PRE_PRO_ENV }} -o tsv --query "[0].version") != $PRE_PRO_ENV_VERSION ]]; then
                  echo "Environment version is lower than required version, updating environment..."
                  az ml environment create -f ./environment/preproEnv.yaml
                  echo "PRE_PRO_ENV updated successfully."
                else
                  echo "PRE_PRO_ENV is up to date."
                fi
            fi

      - name: 'Run the azure ml pipeline'
        uses: azure/CLI@v1
        id: azure-pipeline
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml job create --file ./pipelines/text-sentiment.yaml --set name=emotions-classification-${{ github.sha }}-${{ github.run_id }} --stream
            echo "Pipeline is done running"
            VERSION=$(az ml model list -n emotions-classification --query '[0].version')
            echo "Latest version of model is $VERSION"
            echo "latest_version=$VERSION" >> "$GITHUB_OUTPUT"
        
      - name: 'Stop compute instance'
        uses: azure/CLI@v1
        id: azure-stop-compute
        if: always()
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute stop -n ${{ steps.read_yaml.outputs.COMPUTE_NAME }}
        continue-on-error: true
            
  download-model:
    runs-on: ubuntu-latest
    needs: azure-pipeline
    # if: (${{ needs.azure-pipeline.result == 'success' }} || ${{ needs.azure-pipeline.result == 'skipped' }}) && ${{ inputs.download_model }}
    if: ${{ inputs.download_model }}
    steps:
      - name: 'Checkout out repository'
        uses: actions/checkout@v4

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 'Download model'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            VERSION=$(az ml model list -n emotions-classification --query '[0].version' -o tsv)
            echo "Latest version of model is $VERSION"
            echo "::set-output name=latest_version::$VERSION"
            az ml model download --name emotions-classification --version $VERSION --download-path ./inference 
      
      - name: Upload api code
        uses: actions/upload-artifact@v2
        with:
          name: docker-config
          path: inference
    
  deploy-model:
    needs: download-model
    runs-on: ubuntu-latest
    if: ${{ needs.download-model.result == 'success' }}
    steps:

      - name: 'Docker metadata'
        id: docker-metadata
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/demeulemeestertibe/mlops-eindopdracht-2.0
          tags: |
            type=ref,event=branch
            type=sha
      
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN }}
    
      - name: Download API code for Docker
        uses: actions/download-artifact@v2
        with:
          name: docker-config
          path: inference

      - name: Docker Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./inference
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}